import gc


#This code does insertion and deletion operations in a doubly linked list

class Node :
    def __init__(self,data =None ,next =None , prev= None):
        self.data =data
        self.next= next
        self.prev= prev

class LinkedList:
    def __init__(self):
        self.head = None

    def push(self,new_data):
        #make a new node to push in the beginning

        new_node = Node(data = new_data)

        #make next of new node to point to the head and previous to point to None

        new_node.next = self.head
        new_node.prev = None

        #Linking the head node with the new node
        if self.head is not None:
            self.head.prev = new_node

        self.head = new_node



    def append(self,new_data):

        new_node = Node(data = new_data)
        last = self.head

        new_node.next = None

        if self.head is None :
            new_node.prev= None
            self.head =new_node
            return
        while (last.next is not None):
            last = last.next

        last.next = new_node
        new_node.prev= last


    def InsertAfter(self,prev_node,new_data):
        new_node = Node(new_data)
        new_node.next = prev_node.next
        new_node.prev= prev_node
        prev_node.next= new_node

        if new_node.next is not None :
            new_node.next.prev= new_node


    def deleteNode(self,dele):

        if dele is None or self.head is None:
            return
        if self.head == dele:
            self.head =dele.next

        gc.collect()

    def deleteAtAny(self, position):
        if self.head == None:
            return
        temp = self.head

        if position == 0:
            self.head = temp.next
            temp = None
            return

        for i in range(position - 1):
            temp = temp.next
            if temp is None:
                break
        if temp is None:
            return

        if temp.next is None:
            return

        next = temp.next.next
        temp.next = None
        temp.next = next





    def printList(self,temp):
        temp = self.head

        while(temp is not None):
            print(temp.data,end=" ")
            temp=temp.next




if __name__ == "__main__":
    llist =LinkedList()

    llist.push(1)
    llist.push(2)
    llist.push(3)
    llist.push(4)
    llist.push(5)
    llist.push(6)
    llist.append(55)
    llist.push(12)
    llist.deleteNode()
    llist.deleteAtAny(5)
    llist.printList(llist.head)


